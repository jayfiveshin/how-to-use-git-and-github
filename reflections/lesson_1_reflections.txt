It was much easier to see what changes were made between two different files.
Rather than looking over every single line, I only had to look at lines that
were different. This way, it limited the effort required to detect any spelling
mistakes.

Question: How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Having the entire history of a file allows us to easily go back and see what
changes we've made in the past. That way, if something does go wrong (as it
always does in programming), you are able to see a list of changes that's been
made in the past, along with when they were made. If we ever need to revert back
to a previous version, this is easy for us to do.

Question: What do you think are the pros and cons of manually choosing when to
create a commit, like you do in Git, vs having versions automatically saved,
like Google docs does?

I think the pros are the following:
- Scheduled, you don't have to think about it.

Cons:
- No control over when commits are made.

In programming the cons outweigh the pros of having versions automatically saved,
because it is important that each commmit includes on logical change, that is
complete in feature.

Question: Why do you think some version control systems, like Git, allow saving
multiple files in one commit, while others, like Google Docs, treat each file
separately?

I think this is because in progrmaming, you will very often need to modify more
than one file in one logical change in the application. This way, you would
prefer if the version control system can keep track of changes in multiple files
in one commmit, rather than keep each file tracked separately.

Question: How can you use the commands git log and git diff to view the history
of files?

I can use the git log and git diff to see what the differences were between two
different commmits. The commits don't have to be right after one another, they
can be between any time period.

Question: How might using version control make you more confident to make
changes that could break something?

Knowing that I have a full history of what has happened in the past, and that
I have the ability to revert to a working version of a code, I will be confident
that I can try something out and if something goes wrong, I'll be able to revert
my progress and try again.


Question: Now that you have your workspace set up, what do you want to try using
Git for?

I would like to use Git for any time when I am doing any kind of programming.

